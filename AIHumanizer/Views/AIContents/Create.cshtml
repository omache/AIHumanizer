@model AIHumanizer.Models.AIContent;
@using Microsoft.AspNetCore.Identity;
@inject UserManager<IdentityUser> userManager;

@{
    ViewData["Title"] = "AI Content Editor";
}

<div class="container-fluid px-4 py-3">
    <div class="row mb-4">
        <div class="col">
            <h2 class="text-primary mb-3">AI Content Editor</h2>
            <p class="text-muted">Transform your AI-generated content into natural, human-like text.</p>
        </div>
    </div>

    <div class="row">
        <!-- Left Form Column -->
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-header bg-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="material-icons align-middle me-2" style="font-size: 20px;">edit</i>
                            Input Content
                        </h5>
                        <span class="badge bg-primary" id="wordCount">0 / 250 words</span>
                    </div>
                </div>
                <div class="card-body">
                    <form id="documentForm">
                        <div class="form-group">
                            <div class="input-group mb-3">
                                <span class="input-group-text">
                                    <i class="material-icons">format_size</i>
                                </span>
                                <select class="form-select" id="fontSizeSelect" onchange="changeFontSize()">
                                    <option value="14">14px</option>
                                    <option value="16" selected>16px</option>
                                    <option value="18">18px</option>
                                    <option value="20">20px</option>
                                </select>
                            </div>
                            <textarea asp-for="Content" id="myBox" class="form-control"
                                      style="width: 100%; height: 60vh; resize: none; font-size: 16px;"
                                      oninput="updateWordCount()"
                                      placeholder="Paste your AI-generated content here (minimum 20 words, maximum 250 words)..."></textarea>
                            <span asp-validation-for="Content" class="text-danger"></span>
                        </div>
                        <div class="alert alert-danger mt-2" id="warningMessage" style="display:none;">
                            <i class="material-icons align-middle me-2">warning!</i>
                            You have exceeded the word limit. Please reduce your content to 250 words or less.
                        </div>
                        <input type="hidden" asp-for="UserId" value="@userManager.GetUserId(User)" />
                        <div class="d-flex justify-content-between align-items-center mt-3">
                            <button type="button" class="btn btn-outline-secondary" onclick="clearContent()">
                                <i class="material-icons align-middle me-1">delete_outline</i>
                                Clear
                            </button>
                            <button type="submit" id="submitButton" class="btn btn-primary" disabled>
                                <i class="material-icons align-middle me-1">auto_fix_high</i>
                                Humanize Content
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Right Output Column -->
        <div class="col-md-6">
            <div class="card shadow-sm" id="outputBox" style="display: none;">
                <div class="card-header bg-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="material-icons align-middle me-2" style="font-size: 20px;">description</i>
                            Humanized Output
                        </h5>
                        <div class="btn-group">
                            <button id="copyButton" class="btn btn-outline-primary btn-sm" onclick="copyToClipboard()">
                                <i class="material-icons align-middle me-1">content_copy</i>
                                Copy
                            </button>
                            <button id="downloadButton" class="btn btn-outline-primary btn-sm" onclick="downloadContent()">
                                <i class="material-icons align-middle me-1">download</i>
                                Download
                            </button>
                        </div>
                    </div>
                </div>
                <div class="card-body position-relative" style="height: 60vh;">
                    <textarea id="submittedContent" class="form-control h-100" readonly
                              style="resize: none; display: none;"></textarea>
                    <div id="countdownDisplay" class="position-absolute top-50 start-50 translate-middle text-center"
                         style="display: none;">
                        <div class="spinner-border text-primary mb-3" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <div style="font-size: 48px; color: #007bff;" id="countdownNumber">10</div>
                        <div class="text-muted">Humanizing your content...</div>
                    </div>
                </div>
            </div>
        </div>
        <h3 id=wordContent >Remaining Content: </h3>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        function updateWordCount() {
    const textarea = document.getElementById('myBox');
    const wordCountDisplay = document.getElementById('wordCount');
    const submitButton = document.getElementById('submitButton');
    const warningMessage = document.getElementById('warningMessage');

    const words = textarea.value.trim().split(/\s+/).filter(word => word.length > 0);
    const wordCount = words.length;

    wordCountDisplay.textContent = `${wordCount} / 250 words`;

    if (wordCount <= 20 || wordCount > 250) {
        submitButton.disabled = true;
        warningMessage.style.display = wordCount > 250 ? 'block' : 'none';
        if (wordCount <= 20) {
            submitButton.classList.remove('btn-danger');
            submitButton.classList.add('btn-primary');
        } else {
            submitButton.classList.remove('btn-primary');
            submitButton.classList.add('btn-danger');
        }
    } else {
        submitButton.disabled = false;
        submitButton.classList.remove('btn-danger');
        submitButton.classList.add('btn-primary');
        warningMessage.style.display = 'none';
    }
}

document.getElementById('documentForm').addEventListener('submit', async function (e) {
    e.preventDefault();

    document.getElementById('outputBox').style.display = 'block';
    document.getElementById('submittedContent').style.display = 'none';
     
    const countdownDisplay = document.getElementById('countdownDisplay');
    const countdownNumber = document.getElementById('countdownNumber');
    const wordContent = document.getElementById('wordContent');
    countdownDisplay.style.display = 'block';

    let countdown = 10;
    let contentData = null;

    const contentPromise = sendContentToServer();

    const countdownInterval = setInterval(async () => {
        countdown--;
        countdownNumber.textContent = countdown;

        if (countdown <= 0) {
            clearInterval(countdownInterval);

            if (!contentData) {
                contentData = await contentPromise;
            }

            countdownDisplay.style.display = 'none';
            const submittedContent = document.getElementById('submittedContent');
            submittedContent.value = contentData.modifiedContent;
            
            // Update the remaining content display with proper formatting
            const remainingContent = contentData.remainingSamples;
            const hoursUntilReset = contentData.hoursUntilReset;
            wordContent.innerHTML = `
                <div class="alert alert-info mt-3">
                    <i class="material-icons align-middle me-2">info</i>
                    Remaining Uses: <strong>${remainingContent}</strong>
                    <br>
                    <small class="text-muted">Resets in ${Math.round(hoursUntilReset)} hours</small>
                </div>
            `;

            submittedContent.style.display = 'block';
        }

        if (!contentData) {
            const result = await Promise.race([
                contentPromise,
                new Promise(resolve => setTimeout(resolve, 0))
            ]);
            if (result) {
                contentData = result;
            }
        }
    }, 1000);
});

async function sendContentToServer() {
    const content = document.getElementById('myBox').value;
    const userId = document.querySelector('input[name="UserId"]').value;

    try {
        const response = await fetch('/AIContents/CreateAjax', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ Content: content, UserId: userId })
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Server response was not OK');
        }

        return await response.json();
    } catch (error) {
        const wordContent = document.getElementById('wordContent');
        wordContent.innerHTML = `
            <div class="alert alert-danger mt-3">
                <i class="material-icons align-middle me-2">error</i>
                ${error.message}
            </div>
        `;
        throw error;
    }
}
    </script>
}