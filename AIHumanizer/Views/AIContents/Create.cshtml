@model AIHumanizer.Models.AIContent;
@using Microsoft.AspNetCore.Identity;
@inject UserManager<IdentityUser> userManager;

@{
    ViewData["Title"] = "AI Content Editor";
}

<div class="container-fluid px-4 py-3">
    <div class="row mb-4">
        <div class="col">
            <h2 class="text-primary mb-3">AI Content Editor</h2>
            <p class="text-muted">Transform your AI-generated content into natural, human-like text.</p>
        </div>
    </div>

    <div class="row">
        <!-- Left Form Column -->
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-header bg-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="material-icons align-middle me-2" style="font-size: 20px;">edit</i>
                            Input Content
                        </h5>
                        <span class="badge bg-primary" id="wordCount">0 / 250 words</span>
                    </div>
                </div>
                <div class="card-body">
                    <form id="documentForm">
                        <div class="form-group">
                            <div class="input-group mb-3">
                                <span class="input-group-text">
                                    <i class="material-icons">format_size</i>
                                </span>
                                <select class="form-select" id="fontSizeSelect" onchange="changeFontSize()">
                                    <option value="14">14px</option>
                                    <option value="16" selected>16px</option>
                                    <option value="18">18px</option>
                                    <option value="20">20px</option>
                                </select>
                            </div>
                            <textarea asp-for="Content" id="myBox" class="form-control"
                                      style="width: 100%; height: 60vh; resize: none; font-size: 16px;"
                                      oninput="updateWordCount()"
                                      placeholder="Paste your AI-generated content here (minimum 20 words, maximum 250 words)..."></textarea>
                            <span asp-validation-for="Content" class="text-danger"></span>
                        </div>
                        <div class="alert alert-danger mt-2" id="warningMessage" style="display:none;">
                            <i class="material-icons align-middle me-2">warning!</i>
                            You have exceeded the word limit. Please reduce your content to 250 words or less.
                        </div>
                        <input type="hidden" asp-for="UserId" value="@userManager.GetUserId(User)" />
                        <div class="d-flex justify-content-between align-items-center mt-3">
                            <button type="button" class="btn btn-outline-secondary" onclick="clearContent()">
                                <i class="material-icons align-middle me-1">delete_outline</i>
                                Clear
                            </button>
                            <button type="submit" id="submitButton" class="btn btn-primary" disabled>
                                <i class="material-icons align-middle me-1">auto_fix_high</i>
                                Humanize Content
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Right Output Column -->
        <div class="col-md-6">
            <div class="card shadow-sm" id="outputBox" style="display: none;">
                <div class="card-header bg-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="material-icons align-middle me-2" style="font-size: 20px;">description</i>
                            Humanized Output
                        </h5>
                        <div class="btn-group">
                            <button id="copyButton" class="btn btn-outline-primary btn-sm" onclick="copyToClipboard()">
                                <i class="material-icons align-middle me-1">content_copy</i>
                                Copy
                            </button>
                            <button id="downloadButton" class="btn btn-outline-primary btn-sm" onclick="downloadContent()">
                                <i class="material-icons align-middle me-1">download</i>
                                Download
                            </button>
                        </div>
                    </div>
                </div>
                <div class="card-body position-relative" style="height: 60vh;">
                    <textarea id="submittedContent" class="form-control h-100" readonly
                              style="resize: none; display: none;"></textarea>
                    <div id="countdownDisplay" class="position-absolute top-50 start-50 translate-middle text-center"
                         style="display: none;">
                        <div class="spinner-border text-primary mb-3" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <div style="font-size: 48px; color: #007bff;" id="countdownNumber">10</div>
                        <div class="text-muted">Humanizing your content...</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        function updateWordCount() {
            const textarea = document.getElementById('myBox');
            const wordCountDisplay = document.getElementById('wordCount');
            const submitButton = document.getElementById('submitButton');
            const warningMessage = document.getElementById('warningMessage');

            const words = textarea.value.trim().split(/\s+/).filter(word => word.length > 0);
            const wordCount = words.length;

            wordCountDisplay.textContent = `${wordCount} / 250 words`;

            if (wordCount <= 20 || wordCount > 250) {
                submitButton.disabled = true;
                warningMessage.style.display = wordCount > 250 ? 'block' : 'none';
                if (wordCount <= 20) {
                    submitButton.classList.remove('btn-danger');
                    submitButton.classList.add('btn-primary');
                } else {
                    submitButton.classList.remove('btn-primary');
                    submitButton.classList.add('btn-danger');
                }
            } else {
                submitButton.disabled = false;
                submitButton.classList.remove('btn-danger');
                submitButton.classList.add('btn-primary');
                warningMessage.style.display = 'none';
            }
        }

        function changeFontSize() {
            const textarea = document.getElementById('myBox');
            const fontSize = document.getElementById('fontSizeSelect').value;
            textarea.style.fontSize = `${fontSize}px`;
        }

        function clearContent() {
            if (confirm('Are you sure you want to clear all content?')) {
                document.getElementById('myBox').value = '';
                updateWordCount();
            }
        }

        function downloadContent() {
            const content = document.getElementById('submittedContent').value;
            const blob = new Blob([content], { type: 'text/plain' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'humanized-content.txt';
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        }

        document.getElementById('documentForm').addEventListener('submit', async function (e) {
            e.preventDefault();

            document.getElementById('outputBox').style.display = 'block';
            document.getElementById('submittedContent').style.display = 'none';
            const countdownDisplay = document.getElementById('countdownDisplay');
            const countdownNumber = document.getElementById('countdownNumber');
            countdownDisplay.style.display = 'block';

            let countdown = 10;
            let contentData = null;

            const contentPromise = sendContentToServer();

            const countdownInterval = setInterval(async () => {
                countdown--;
                countdownNumber.textContent = countdown;

                if (countdown <= 0) {
                    clearInterval(countdownInterval);

                    if (!contentData) {
                        contentData = await contentPromise;
                    }

                    countdownDisplay.style.display = 'none';
                    const submittedContent = document.getElementById('submittedContent');
                    submittedContent.value = contentData.modifiedContent;
                    submittedContent.style.display = 'block';
                }

                if (!contentData) {
                    const result = await Promise.race([
                        contentPromise,
                        new Promise(resolve => setTimeout(resolve, 0))
                    ]);
                    if (result) {
                        contentData = result;
                    }
                }
            }, 1000);
        });

        async function sendContentToServer() {
            const content = document.getElementById('myBox').value;
            const userId = "@userManager.GetUserId(User)";

            try {
                const response = await fetch('@Url.Action("CreateAjax", "AIContents")', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ Content: content, UserId: userId })
                });

                if (!response.ok) {
                    throw new Error('Server response was not OK');
                }

                return await response.json();
            } catch (error) {
                alert('Error: ' + error.message);
                throw error;
            }
        }

        function copyToClipboard() {
            const textArea = document.getElementById('submittedContent');
            textArea.select();
            document.execCommand('copy');

            // Show a temporary success message
            const copyButton = document.getElementById('copyButton');
            const originalText = copyButton.innerHTML;
            copyButton.innerHTML = '<i class="material-icons align-middle me-1">check</i>Copied!';
            copyButton.disabled = true;

            setTimeout(() => {
                copyButton.innerHTML = originalText;
                copyButton.disabled = false;
            }, 2000);
        }
    </script>
}